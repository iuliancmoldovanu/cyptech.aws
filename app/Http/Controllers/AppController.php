<?php
	 namespace App\Http\Controllers;

	 use App\Helpers\VisitorsBuilder;
     use App\Library\Classes\GameManager;
     use App\User;
	 use App\Player;
	 use App\Game;
	 use App\Visitor;
	 use App\WeekDay;
	 use Carbon\Carbon;
	 use Illuminate\Http\Request;
	 use App\Http\Requests;
	 use Illuminate\Session\TokenMismatchException;
	 use Illuminate\Support\Facades\Auth;
	 use Illuminate\Support\Facades\Hash;
	 use Illuminate\Support\Facades\Input;
	 use Illuminate\Support\Facades\Redirect;
	 use Illuminate\Support\Facades\Session;

	 class AppController extends Controller {

			public function __construct() {
				 $this->middleware('auth');
			}

			public function isUserLogged() {
				 if (Auth::user()) {
						return Redirect::to('dashboard');
				 }else
				 {
					 return Redirect::to( 'login' );
				 }
			}

			public function dashboard() {
                 VisitorsBuilder::createVisitor();

                 $Game = new Game();
                 $startGameDate = $Game->getGameDate();

                 $gameManager = new GameManager();
                 $isCurrentGameCancelled = $gameManager->isCurrentGameCancelled();
                 $noOfDays = Auth::user()->player->ranking_priority ?? 3;

                 $currentGame = Game::getCurrentWeekGame();

                 $hasTeamGenerated = $currentGame->generated_by > 0;
                 $generatedAt = $currentGame->generated_at;
                 $generatedBy = $hasTeamGenerated ? User::where('id', $currentGame->generated_by)->first()->username : '';

				 return view('users.dashboard', [
				     'isCurrentGameCancelled' => $isCurrentGameCancelled,
                     'nextStartDate' => $startGameDate->format('l jS \\of F Y H:i'),
				     'nextConfirmDate' => $startGameDate->subDays($noOfDays)->startOfDay()->format(('l jS \\of F Y')),
                     'canBeCancelled' => $gameManager->canBeCancelled(),
					 'match' => WeekDay::getPlayingDay(),
					 'players' => Player::getPlayersFullDetails(),
					 'player' => Player::getPlayerFullDetails(),
					 'games' => Game::getGames(),
					 'message' => Player::alertMessage()['message'],
                     'jsonConfirm' => json_decode(Player::startConfirm()),
                     "hasTeamGenerated" => $hasTeamGenerated,
                     "generatedAt" => $generatedAt,
                     "generatedBy" => $generatedBy,
				 ]);
			}

			public function generate_teams() {
				 // generate teams
				 Game::generateTeams();

                $currentGame = Game::getCurrentWeekGame();
                $players = Player::getPlayersFullDetails();
                $hasTeamGenerated = $currentGame->generated_by > 0;
                $generatedAt = $currentGame->generated_at;
                $generatedBy = $hasTeamGenerated ? User::where('id', $currentGame->generated_by)->first()->username : '';
                \Log::info("Team generated by " . $generatedBy . ' at ' . $generatedAt);

                $playerSectionHTML = view('templates.dashboard.players_section', compact(['players', 'hasTeamGenerated', 'generatedBy', 'generatedAt']))->render();

				 // send to dashboard page
                return \Response::json([
                    'status' => "success",
                    'message' => "Team generated successfully",
                    "players_section" => $playerSectionHTML,
                    'header_message' => Player::alertMessage()['message']
                ]);
			}

			public function profile() {
                 VisitorsBuilder::createVisitor();
				 return view('users.profile', ['player' => Player::getPlayerFullDetails()]);
			}

			public function getRanking() {
				 return view('users.ranking', ['player' => Player::getPlayerFullDetails()]);
			}

			public function getList() {
				 Session::flash('user_search', Input::has('ok') ? Input::get('search') : (Session::has('user_search') ? Session::get('user_search') : ''));
				 Session::flash('user_field', Input::has('field') ? Input::get('field') : (Session::has('user_field') ? Session::get('user_field') : 'total_games'));
				 Session::flash('user_sort', Input::has('sort') ? Input::get('sort') : (Session::has('user_sort') ? Session::get('user_sort') : 'desc'));
				 $users = User::with('player')
					 ->join('players', 'players.user_id', '=', 'users.id')
					 ->where('username', 'like', '%' . Session::get('user_search') . '%')
					 ->orderBy(Session::get('user_field'), Session::get('user_sort'))
					 ->paginate(10);
				 return view('users.ranking.list', ['users' => $users]);
			}

			public function ranking() {
                 VisitorsBuilder::createVisitor();
				 return view('users.ranking', ['players' => Player::getActivePlayersRank(), 'player' => Player::getPlayerFullDetails()]);
			}


		 public function getPlayersList() {
			 $users = User::with('player')
				 ->join('players', 'players.user_id', '=', 'users.id')
				 ->where('players.active', true)
				 ->orderBy('players.points', 'desc')
				 ->get();
			 echo json_encode( $users, JSON_NUMERIC_CHECK );
		 }

			public function games() {
                 VisitorsBuilder::createVisitor();
				 return view('users.games', ['player' => Player::getPlayerFullDetails(), 'games' => Game::getGames()->paginate(10)]);
			}

			/**
			 * @return string
			 */
			public function confirm() {

                $players = Player::isPlayersNeeded();
                if ($players === 0) {
                    return "error";
                } else {
                    $userId = Auth::user()->id;
                    // save new player to the current list game
                    Player::where('user_id', $userId)
                        ->update([
                            'status' => "available",
                            'unavailable_for' => 0,
                            'last_confirm' => Carbon::now()->toDateTimeString()
                        ]);
                    $players--;
                    if($players > 0 && $players < 7) {
                        MailController::send($players);
                    }

                    \Log::info(User::where('id', $userId)->first()->username . " confirmed at " . Carbon::now()->toDateTimeString());
                    return 'success';
                }
			}

         /**
          * @param $weeks
          * @return string
          */
			public function unavailable($weeks) {
                $players = Player::isPlayersNeeded();
                if ($players == 0) {
                    return "error";
                } else {
                    $weeks = $weeks . ((int) $weeks === 1 ?  " week" : " weeks");
                    // save new player to the current list game
                    Player::where('user_id', Auth::user()->id)
                        ->update([
                            'status' => "unavailable",
                            'unavailable_for' => $weeks,
                            'last_confirm' => Carbon::now()->toDateTimeString()
                        ]);
                    return 'success';
                }
			}

			// testing only
			public function test() {
				print_r(date("YW", strtotime("Y-m-d h:i:s")));
				print_r(Game::show_cancel_game());
				dd('OK');
				 //			$visitor = Visitor::all();
				 //			var_dump ( $visitor );

//				 			$users = User::with ( 'player' )
//				 				->join ( 'players', 'players.user_id', '=', 'users.id' )
//				 				->paginate ( 10 );


				 // get the current time  - 2015-12-19 10:10:54
				 //$current = Carbon::now();
				 //$current = new Carbon();

dd(Player::isPlayersNeeded());
				 			$visitors = Visitor::all();
//				 			$users = collect([$users])->toArray();
				 			//var_dump(Carbon::now()->toDateTimeString() . ' - ' . date('Y-m-d H:i:s'));
//				 			foreach ($users as $user)
//				 			echo ( '<br>' .$user );
				 exit();
				 //return view('test', ['visitors' => $visitors]);
			}
	 }
